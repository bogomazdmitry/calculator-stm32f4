
calc-new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bfc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002d9c  08002d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ddc  08002ddc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002ddc  08002ddc  00012ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002de4  08002de4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de4  08002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fd4  20000010  08002dfc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003fe4  08002dfc  00023fe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad91  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff2  00000000  00000000  0002add1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  0002cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e2f  00000000  00000000  0002deb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e28  00000000  00000000  00043cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a89  00000000  00000000  0004db07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7590  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002210  00000000  00000000  000d75e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002d84 	.word	0x08002d84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08002d84 	.word	0x08002d84

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004dc:	4b14      	ldr	r3, [pc, #80]	; (8000530 <DWT_Delay_Init+0x58>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	4a13      	ldr	r2, [pc, #76]	; (8000530 <DWT_Delay_Init+0x58>)
 80004e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004e6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <DWT_Delay_Init+0x58>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	4a10      	ldr	r2, [pc, #64]	; (8000530 <DWT_Delay_Init+0x58>)
 80004ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004f2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <DWT_Delay_Init+0x5c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <DWT_Delay_Init+0x5c>)
 80004fa:	f023 0301 	bic.w	r3, r3, #1
 80004fe:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <DWT_Delay_Init+0x5c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <DWT_Delay_Init+0x5c>)
 8000506:	f043 0301 	orr.w	r3, r3, #1
 800050a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <DWT_Delay_Init+0x5c>)
 800050e:	2200      	movs	r2, #0
 8000510:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000512:	bf00      	nop
     __ASM volatile ("NOP");
 8000514:	bf00      	nop
  __ASM volatile ("NOP");
 8000516:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <DWT_Delay_Init+0x5c>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000520:	2300      	movs	r3, #0
 8000522:	e000      	b.n	8000526 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000524:	2301      	movs	r3, #1
  }
}
 8000526:	4618      	mov	r0, r3
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	e000edf0 	.word	0xe000edf0
 8000534:	e0001000 	.word	0xe0001000

08000538 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	4a07      	ldr	r2, [pc, #28]	; (8000564 <vApplicationGetIdleTaskMemory+0x2c>)
 8000548:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <vApplicationGetIdleTaskMemory+0x30>)
 800054e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	2000002c 	.word	0x2000002c
 8000568:	20000080 	.word	0x20000080

0800056c <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000574:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <DWT_Delay_us+0x40>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800057a:	f001 f95d 	bl	8001838 <HAL_RCC_GetHCLKFreq>
 800057e:	4603      	mov	r3, r0
 8000580:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <DWT_Delay_us+0x44>)
 8000582:	fba2 2303 	umull	r2, r3, r2, r3
 8000586:	0c9b      	lsrs	r3, r3, #18
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	fb02 f303 	mul.w	r3, r2, r3
 800058e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000590:	bf00      	nop
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <DWT_Delay_us+0x40>)
 8000594:	685a      	ldr	r2, [r3, #4]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	1ad2      	subs	r2, r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	429a      	cmp	r2, r3
 800059e:	d3f8      	bcc.n	8000592 <DWT_Delay_us+0x26>
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	e0001000 	.word	0xe0001000
 80005b0:	431bde83 	.word	0x431bde83

080005b4 <receive_data>:


#define IR_chanel GPIOC

uint32_t receive_data(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	uint32_t code = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]

	/* The START Sequence begin here
	   * there will be a pulse of 9ms LOW and
	   * than 4.5 ms space (HIGH)
	   */
	while (!(HAL_GPIO_ReadPin(IR_chanel, IR_Pin))); // wait for the pin to go high.. 9ms LOW
 80005be:	bf00      	nop
 80005c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c4:	4828      	ldr	r0, [pc, #160]	; (8000668 <receive_data+0xb4>)
 80005c6:	f000 fcd7 	bl	8000f78 <HAL_GPIO_ReadPin>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d0f7      	beq.n	80005c0 <receive_data+0xc>
	while ((HAL_GPIO_ReadPin(IR_chanel, IR_Pin))); // wait for the pin to go low.. 4.5ms HIGH
 80005d0:	bf00      	nop
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	4824      	ldr	r0, [pc, #144]	; (8000668 <receive_data+0xb4>)
 80005d8:	f000 fcce 	bl	8000f78 <HAL_GPIO_ReadPin>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1f7      	bne.n	80005d2 <receive_data+0x1e>
	/* DATA Reception
	   * We are only going to check the SPACE after 562.5us pulse
	   * if the space is 562.5us, the bit indicates '0'
	   * if the space is around 1.6ms, the bit is '1'
	   */
	for (int i = 0; i < 32; i++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	e036      	b.n	8000656 <receive_data+0xa2>
	{
		count = 0;
 80005e8:	4b20      	ldr	r3, [pc, #128]	; (800066c <receive_data+0xb8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
		while (!(HAL_GPIO_ReadPin(IR_chanel, IR_Pin)))
 80005ee:	bf00      	nop
 80005f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f4:	481c      	ldr	r0, [pc, #112]	; (8000668 <receive_data+0xb4>)
 80005f6:	f000 fcbf 	bl	8000f78 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d0f7      	beq.n	80005f0 <receive_data+0x3c>
			;										  // wait for pin to go high.. this is 562.5us LOW
		while ((HAL_GPIO_ReadPin(IR_chanel, IR_Pin))) // count the space length while the pin is high
 8000600:	e008      	b.n	8000614 <receive_data+0x60>
		{
			count++;
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <receive_data+0xb8>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <receive_data+0xb8>)
 800060c:	701a      	strb	r2, [r3, #0]
			DWT_Delay_us(100);
 800060e:	2064      	movs	r0, #100	; 0x64
 8000610:	f7ff ffac 	bl	800056c <DWT_Delay_us>
		while ((HAL_GPIO_ReadPin(IR_chanel, IR_Pin))) // count the space length while the pin is high
 8000614:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000618:	4813      	ldr	r0, [pc, #76]	; (8000668 <receive_data+0xb4>)
 800061a:	f000 fcad 	bl	8000f78 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d1ee      	bne.n	8000602 <receive_data+0x4e>
		}
		if (count > 12) // if the space is more than 1.2 ms
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <receive_data+0xb8>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b0c      	cmp	r3, #12
 800062a:	d908      	bls.n	800063e <receive_data+0x8a>
		{
			code |= (1UL << (31 - i)); // write 1
 800062c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	fa22 f303 	lsr.w	r3, r2, r3
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	4313      	orrs	r3, r2
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	e008      	b.n	8000650 <receive_data+0x9c>
		}
		else
			code &= ~(1UL << (31 - i)); // write 0
 800063e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	fa22 f303 	lsr.w	r3, r2, r3
 8000648:	43db      	mvns	r3, r3
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	4013      	ands	r3, r2
 800064e:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 32; i++)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	2b1f      	cmp	r3, #31
 800065a:	ddc5      	ble.n	80005e8 <receive_data+0x34>
	}
	return code;
 800065c:	687b      	ldr	r3, [r7, #4]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40020800 	.word	0x40020800
 800066c:	20003fdc 	.word	0x20003fdc

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 f9a3 	bl	80009c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f81d 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f87b 	bl	8000778 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	DWT_Delay_Init ();
 8000682:	f7ff ff29 	bl	80004d8 <DWT_Delay_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of calcTask */
  osThreadDef(calcTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <main+0x40>)
 8000688:	1d3c      	adds	r4, r7, #4
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  calcTaskHandle = osThreadCreate(osThread(calcTask), NULL);
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f001 f8f6 	bl	800188e <osThreadCreate>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <main+0x44>)
 80006a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006a8:	f001 f8ea 	bl	8001880 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <main+0x3c>
 80006ae:	bf00      	nop
 80006b0:	08002da8 	.word	0x08002da8
 80006b4:	20003fd4 	.word	0x20003fd4

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fb54 	bl	8002d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <SystemClock_Config+0xb8>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a22      	ldr	r2, [pc, #136]	; (8000770 <SystemClock_Config+0xb8>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b20      	ldr	r3, [pc, #128]	; (8000770 <SystemClock_Config+0xb8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <SystemClock_Config+0xbc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <SystemClock_Config+0xbc>)
 8000706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <SystemClock_Config+0xbc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000724:	2300      	movs	r3, #0
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fc6f 	bl	8001010 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000738:	f000 f8b0 	bl	800089c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fed2 	bl	8001500 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000762:	f000 f89b 	bl	800089c <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <MX_GPIO_Init+0xcc>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a2b      	ldr	r2, [pc, #172]	; (8000844 <MX_GPIO_Init+0xcc>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b29      	ldr	r3, [pc, #164]	; (8000844 <MX_GPIO_Init+0xcc>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b25      	ldr	r3, [pc, #148]	; (8000844 <MX_GPIO_Init+0xcc>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a24      	ldr	r2, [pc, #144]	; (8000844 <MX_GPIO_Init+0xcc>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b22      	ldr	r3, [pc, #136]	; (8000844 <MX_GPIO_Init+0xcc>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_GPIO_Init+0xcc>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a1d      	ldr	r2, [pc, #116]	; (8000844 <MX_GPIO_Init+0xcc>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_GPIO_Init+0xcc>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2120      	movs	r1, #32
 80007e6:	4818      	ldr	r0, [pc, #96]	; (8000848 <MX_GPIO_Init+0xd0>)
 80007e8:	f000 fbde 	bl	8000fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IR_Pin */
  GPIO_InitStruct.Pin = IR_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4619      	mov	r1, r3
 8000800:	4812      	ldr	r0, [pc, #72]	; (800084c <MX_GPIO_Init+0xd4>)
 8000802:	f000 fa35 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000806:	2308      	movs	r3, #8
 8000808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4619      	mov	r1, r3
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <MX_GPIO_Init+0xd0>)
 800081a:	f000 fa29 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 800081e:	2320      	movs	r3, #32
 8000820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_GPIO_Init+0xd0>)
 8000836:	f000 fa1b 	bl	8000c70 <HAL_GPIO_Init>

}
 800083a:	bf00      	nop
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020800 	.word	0x40020800

08000850 <calcTask>:
  * @brief  Function implementing the calcTask thread.
  * @param  argument: Not used
  * @retval None
  */
void calcTask()
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(IR_chanel, IR_Pin)); // wait for the pin to go low
 8000854:	bf00      	nop
 8000856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085a:	4808      	ldr	r0, [pc, #32]	; (800087c <calcTask+0x2c>)
 800085c:	f000 fb8c 	bl	8000f78 <HAL_GPIO_ReadPin>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1f7      	bne.n	8000856 <calcTask+0x6>
	data = receive_data();
 8000866:	f7ff fea5 	bl	80005b4 <receive_data>
 800086a:	4603      	mov	r3, r0
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <calcTask+0x30>)
 800086e:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000870:	2120      	movs	r1, #32
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <calcTask+0x34>)
 8000874:	f000 fbb1 	bl	8000fda <HAL_GPIO_TogglePin>
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40020800 	.word	0x40020800
 8000880:	20003fd8 	.word	0x20003fd8
 8000884:	40020000 	.word	0x40020000

08000888 <StartDefaultTask>:
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	calcTask();
 8000890:	f7ff ffde 	bl	8000850 <calcTask>
    osDelay(1);
 8000894:	2001      	movs	r0, #1
 8000896:	f001 f846 	bl	8001926 <osDelay>
	calcTask();
 800089a:	e7f9      	b.n	8000890 <StartDefaultTask+0x8>

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_MspInit+0x54>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <HAL_MspInit+0x54>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x54>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_MspInit+0x54>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_MspInit+0x54>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_MspInit+0x54>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	210f      	movs	r1, #15
 80008ea:	f06f 0001 	mvn.w	r0, #1
 80008ee:	f000 f996 	bl	8000c1e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 f898 	bl	8000a64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000934:	f001 fd7a 	bl	800242c <xTaskGetSchedulerState>
 8000938:	4603      	mov	r3, r0
 800093a:	2b01      	cmp	r3, #1
 800093c:	d001      	beq.n	8000942 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800093e:	f001 ffbb 	bl	80028b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <SystemInit+0x20>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <SystemInit+0x20>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800096c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000970:	480d      	ldr	r0, [pc, #52]	; (80009a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000972:	490e      	ldr	r1, [pc, #56]	; (80009ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000974:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000988:	4c0b      	ldr	r4, [pc, #44]	; (80009b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000996:	f7ff ffd7 	bl	8000948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800099a:	f002 f9c7 	bl	8002d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800099e:	f7ff fe67 	bl	8000670 <main>
  bx  lr    
 80009a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009b0:	08002dec 	.word	0x08002dec
  ldr r2, =_sbss
 80009b4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009b8:	20003fe4 	.word	0x20003fe4

080009bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC_IRQHandler>
	...

080009c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <HAL_Init+0x40>)
 80009ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <HAL_Init+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <HAL_Init+0x40>)
 80009d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_Init+0x40>)
 80009e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e8:	2003      	movs	r0, #3
 80009ea:	f000 f90d 	bl	8000c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ee:	200f      	movs	r0, #15
 80009f0:	f000 f808 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f4:	f7ff ff58 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023c00 	.word	0x40023c00

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_InitTick+0x54>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_InitTick+0x58>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4619      	mov	r1, r3
 8000a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f917 	bl	8000c56 <HAL_SYSTICK_Config>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00e      	b.n	8000a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b0f      	cmp	r3, #15
 8000a36:	d80a      	bhi.n	8000a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	f000 f8ed 	bl	8000c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a44:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <HAL_InitTick+0x5c>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e000      	b.n	8000a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000004 	.word	0x20000004

08000a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_IncTick+0x20>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_IncTick+0x24>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <HAL_IncTick+0x24>)
 8000a76:	6013      	str	r3, [r2, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20003fe0 	.word	0x20003fe0

08000a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <HAL_GetTick+0x14>)
 8000a92:	681b      	ldr	r3, [r3, #0]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20003fe0 	.word	0x20003fe0

08000aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	60d3      	str	r3, [r2, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db0a      	blt.n	8000b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	490c      	ldr	r1, [pc, #48]	; (8000b54 <__NVIC_SetPriority+0x4c>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b30:	e00a      	b.n	8000b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4908      	ldr	r1, [pc, #32]	; (8000b58 <__NVIC_SetPriority+0x50>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	3b04      	subs	r3, #4
 8000b40:	0112      	lsls	r2, r2, #4
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	440b      	add	r3, r1
 8000b46:	761a      	strb	r2, [r3, #24]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	f1c3 0307 	rsb	r3, r3, #7
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	bf28      	it	cs
 8000b7a:	2304      	movcs	r3, #4
 8000b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3304      	adds	r3, #4
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d902      	bls.n	8000b8c <NVIC_EncodePriority+0x30>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3b03      	subs	r3, #3
 8000b8a:	e000      	b.n	8000b8e <NVIC_EncodePriority+0x32>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43d9      	mvns	r1, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	4313      	orrs	r3, r2
         );
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3724      	adds	r7, #36	; 0x24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd4:	d301      	bcc.n	8000bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00f      	b.n	8000bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <SysTick_Config+0x40>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be2:	210f      	movs	r1, #15
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f7ff ff8e 	bl	8000b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <SysTick_Config+0x40>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf2:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SysTick_Config+0x40>)
 8000bf4:	2207      	movs	r2, #7
 8000bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	e000e010 	.word	0xe000e010

08000c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ff47 	bl	8000aa4 <__NVIC_SetPriorityGrouping>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b086      	sub	sp, #24
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c30:	f7ff ff5c 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	6978      	ldr	r0, [r7, #20]
 8000c3c:	f7ff ff8e 	bl	8000b5c <NVIC_EncodePriority>
 8000c40:	4602      	mov	r2, r0
 8000c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff5d 	bl	8000b08 <__NVIC_SetPriority>
}
 8000c4e:	bf00      	nop
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffb0 	bl	8000bc4 <SysTick_Config>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
 8000c8a:	e159      	b.n	8000f40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	f040 8148 	bne.w	8000f3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0303 	and.w	r3, r3, #3
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d005      	beq.n	8000cc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d130      	bne.n	8000d24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	091b      	lsrs	r3, r3, #4
 8000d0e:	f003 0201 	and.w	r2, r3, #1
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d017      	beq.n	8000d60 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d123      	bne.n	8000db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	08da      	lsrs	r2, r3, #3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3208      	adds	r2, #8
 8000d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	220f      	movs	r2, #15
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	691a      	ldr	r2, [r3, #16]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	69b9      	ldr	r1, [r7, #24]
 8000db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0203 	and.w	r2, r3, #3
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f000 80a2 	beq.w	8000f3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b57      	ldr	r3, [pc, #348]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a56      	ldr	r2, [pc, #344]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b54      	ldr	r3, [pc, #336]	; (8000f58 <HAL_GPIO_Init+0x2e8>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e12:	4a52      	ldr	r2, [pc, #328]	; (8000f5c <HAL_GPIO_Init+0x2ec>)
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3302      	adds	r3, #2
 8000e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	220f      	movs	r2, #15
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a49      	ldr	r2, [pc, #292]	; (8000f60 <HAL_GPIO_Init+0x2f0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d019      	beq.n	8000e72 <HAL_GPIO_Init+0x202>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a48      	ldr	r2, [pc, #288]	; (8000f64 <HAL_GPIO_Init+0x2f4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d013      	beq.n	8000e6e <HAL_GPIO_Init+0x1fe>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a47      	ldr	r2, [pc, #284]	; (8000f68 <HAL_GPIO_Init+0x2f8>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d00d      	beq.n	8000e6a <HAL_GPIO_Init+0x1fa>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a46      	ldr	r2, [pc, #280]	; (8000f6c <HAL_GPIO_Init+0x2fc>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d007      	beq.n	8000e66 <HAL_GPIO_Init+0x1f6>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a45      	ldr	r2, [pc, #276]	; (8000f70 <HAL_GPIO_Init+0x300>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d101      	bne.n	8000e62 <HAL_GPIO_Init+0x1f2>
 8000e5e:	2304      	movs	r3, #4
 8000e60:	e008      	b.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e62:	2307      	movs	r3, #7
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e66:	2303      	movs	r3, #3
 8000e68:	e004      	b.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e002      	b.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <HAL_GPIO_Init+0x204>
 8000e72:	2300      	movs	r3, #0
 8000e74:	69fa      	ldr	r2, [r7, #28]
 8000e76:	f002 0203 	and.w	r2, r2, #3
 8000e7a:	0092      	lsls	r2, r2, #2
 8000e7c:	4093      	lsls	r3, r2
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e84:	4935      	ldr	r1, [pc, #212]	; (8000f5c <HAL_GPIO_Init+0x2ec>)
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e92:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eb6:	4a2f      	ldr	r2, [pc, #188]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ee0:	4a24      	ldr	r2, [pc, #144]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee6:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f0a:	4a1a      	ldr	r2, [pc, #104]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	2b0f      	cmp	r3, #15
 8000f44:	f67f aea2 	bls.w	8000c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40013800 	.word	0x40013800
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020400 	.word	0x40020400
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020c00 	.word	0x40020c00
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40013c00 	.word	0x40013c00

08000f78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	e001      	b.n	8000f9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb8:	787b      	ldrb	r3, [r7, #1]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fc4:	e003      	b.n	8000fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	041a      	lsls	r2, r3, #16
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	619a      	str	r2, [r3, #24]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fec:	887a      	ldrh	r2, [r7, #2]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	041a      	lsls	r2, r3, #16
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	619a      	str	r2, [r3, #24]
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e264      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d075      	beq.n	800111a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800102e:	4ba3      	ldr	r3, [pc, #652]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	2b04      	cmp	r3, #4
 8001038:	d00c      	beq.n	8001054 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800103a:	4ba0      	ldr	r3, [pc, #640]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001042:	2b08      	cmp	r3, #8
 8001044:	d112      	bne.n	800106c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001046:	4b9d      	ldr	r3, [pc, #628]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001052:	d10b      	bne.n	800106c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001054:	4b99      	ldr	r3, [pc, #612]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d05b      	beq.n	8001118 <HAL_RCC_OscConfig+0x108>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d157      	bne.n	8001118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e23f      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001074:	d106      	bne.n	8001084 <HAL_RCC_OscConfig+0x74>
 8001076:	4b91      	ldr	r3, [pc, #580]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a90      	ldr	r2, [pc, #576]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 800107c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e01d      	b.n	80010c0 <HAL_RCC_OscConfig+0xb0>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x98>
 800108e:	4b8b      	ldr	r3, [pc, #556]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a8a      	ldr	r2, [pc, #552]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	4b88      	ldr	r3, [pc, #544]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a87      	ldr	r2, [pc, #540]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e00b      	b.n	80010c0 <HAL_RCC_OscConfig+0xb0>
 80010a8:	4b84      	ldr	r3, [pc, #528]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a83      	ldr	r2, [pc, #524]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80010ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b81      	ldr	r3, [pc, #516]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a80      	ldr	r2, [pc, #512]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80010ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d013      	beq.n	80010f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fce0 	bl	8000a8c <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff fcdc 	bl	8000a8c <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e204      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e2:	4b76      	ldr	r3, [pc, #472]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f0      	beq.n	80010d0 <HAL_RCC_OscConfig+0xc0>
 80010ee:	e014      	b.n	800111a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fccc 	bl	8000a8c <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fcc8 	bl	8000a8c <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e1f0      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110a:	4b6c      	ldr	r3, [pc, #432]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0xe8>
 8001116:	e000      	b.n	800111a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d063      	beq.n	80011ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001126:	4b65      	ldr	r3, [pc, #404]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001132:	4b62      	ldr	r3, [pc, #392]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800113a:	2b08      	cmp	r3, #8
 800113c:	d11c      	bne.n	8001178 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800113e:	4b5f      	ldr	r3, [pc, #380]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d116      	bne.n	8001178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114a:	4b5c      	ldr	r3, [pc, #368]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d005      	beq.n	8001162 <HAL_RCC_OscConfig+0x152>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d001      	beq.n	8001162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e1c4      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001162:	4b56      	ldr	r3, [pc, #344]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	4952      	ldr	r1, [pc, #328]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001172:	4313      	orrs	r3, r2
 8001174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001176:	e03a      	b.n	80011ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d020      	beq.n	80011c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001180:	4b4f      	ldr	r3, [pc, #316]	; (80012c0 <HAL_RCC_OscConfig+0x2b0>)
 8001182:	2201      	movs	r2, #1
 8001184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001186:	f7ff fc81 	bl	8000a8c <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800118e:	f7ff fc7d 	bl	8000a8c <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e1a5      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a0:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0f0      	beq.n	800118e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ac:	4b43      	ldr	r3, [pc, #268]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	4940      	ldr	r1, [pc, #256]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	600b      	str	r3, [r1, #0]
 80011c0:	e015      	b.n	80011ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c2:	4b3f      	ldr	r3, [pc, #252]	; (80012c0 <HAL_RCC_OscConfig+0x2b0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff fc60 	bl	8000a8c <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d0:	f7ff fc5c 	bl	8000a8c <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e184      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e2:	4b36      	ldr	r3, [pc, #216]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d030      	beq.n	800125c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d016      	beq.n	8001230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_RCC_OscConfig+0x2b4>)
 8001204:	2201      	movs	r2, #1
 8001206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001208:	f7ff fc40 	bl	8000a8c <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001210:	f7ff fc3c 	bl	8000a8c <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e164      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0x200>
 800122e:	e015      	b.n	800125c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <HAL_RCC_OscConfig+0x2b4>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001236:	f7ff fc29 	bl	8000a8c <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800123e:	f7ff fc25 	bl	8000a8c <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e14d      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f0      	bne.n	800123e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80a0 	beq.w	80013aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10f      	bne.n	800129a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <HAL_RCC_OscConfig+0x2ac>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001296:	2301      	movs	r3, #1
 8001298:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_RCC_OscConfig+0x2b8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d121      	bne.n	80012ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_RCC_OscConfig+0x2b8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <HAL_RCC_OscConfig+0x2b8>)
 80012ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fbeb 	bl	8000a8c <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b8:	e011      	b.n	80012de <HAL_RCC_OscConfig+0x2ce>
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	42470000 	.word	0x42470000
 80012c4:	42470e80 	.word	0x42470e80
 80012c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012cc:	f7ff fbde 	bl	8000a8c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e106      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012de:	4b85      	ldr	r3, [pc, #532]	; (80014f4 <HAL_RCC_OscConfig+0x4e4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d106      	bne.n	8001300 <HAL_RCC_OscConfig+0x2f0>
 80012f2:	4b81      	ldr	r3, [pc, #516]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 80012f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f6:	4a80      	ldr	r2, [pc, #512]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6713      	str	r3, [r2, #112]	; 0x70
 80012fe:	e01c      	b.n	800133a <HAL_RCC_OscConfig+0x32a>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b05      	cmp	r3, #5
 8001306:	d10c      	bne.n	8001322 <HAL_RCC_OscConfig+0x312>
 8001308:	4b7b      	ldr	r3, [pc, #492]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 800130a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130c:	4a7a      	ldr	r2, [pc, #488]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	6713      	str	r3, [r2, #112]	; 0x70
 8001314:	4b78      	ldr	r3, [pc, #480]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 8001316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001318:	4a77      	ldr	r2, [pc, #476]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6713      	str	r3, [r2, #112]	; 0x70
 8001320:	e00b      	b.n	800133a <HAL_RCC_OscConfig+0x32a>
 8001322:	4b75      	ldr	r3, [pc, #468]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 8001324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001326:	4a74      	ldr	r2, [pc, #464]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	6713      	str	r3, [r2, #112]	; 0x70
 800132e:	4b72      	ldr	r3, [pc, #456]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 8001330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001332:	4a71      	ldr	r2, [pc, #452]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 8001334:	f023 0304 	bic.w	r3, r3, #4
 8001338:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d015      	beq.n	800136e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001342:	f7ff fba3 	bl	8000a8c <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001348:	e00a      	b.n	8001360 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800134a:	f7ff fb9f 	bl	8000a8c <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	f241 3288 	movw	r2, #5000	; 0x1388
 8001358:	4293      	cmp	r3, r2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e0c5      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001360:	4b65      	ldr	r3, [pc, #404]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 8001362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0ee      	beq.n	800134a <HAL_RCC_OscConfig+0x33a>
 800136c:	e014      	b.n	8001398 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136e:	f7ff fb8d 	bl	8000a8c <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001374:	e00a      	b.n	800138c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001376:	f7ff fb89 	bl	8000a8c <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f241 3288 	movw	r2, #5000	; 0x1388
 8001384:	4293      	cmp	r3, r2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e0af      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138c:	4b5a      	ldr	r3, [pc, #360]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 800138e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1ee      	bne.n	8001376 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001398:	7dfb      	ldrb	r3, [r7, #23]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d105      	bne.n	80013aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800139e:	4b56      	ldr	r3, [pc, #344]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a55      	ldr	r2, [pc, #340]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 80013a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 809b 	beq.w	80014ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013b4:	4b50      	ldr	r3, [pc, #320]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 030c 	and.w	r3, r3, #12
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d05c      	beq.n	800147a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d141      	bne.n	800144c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c8:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <HAL_RCC_OscConfig+0x4ec>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fb5d 	bl	8000a8c <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d6:	f7ff fb59 	bl	8000a8c <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e081      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e8:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f0      	bne.n	80013d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69da      	ldr	r2, [r3, #28]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	019b      	lsls	r3, r3, #6
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140a:	085b      	lsrs	r3, r3, #1
 800140c:	3b01      	subs	r3, #1
 800140e:	041b      	lsls	r3, r3, #16
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	061b      	lsls	r3, r3, #24
 8001418:	4937      	ldr	r1, [pc, #220]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 800141a:	4313      	orrs	r3, r2
 800141c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800141e:	4b37      	ldr	r3, [pc, #220]	; (80014fc <HAL_RCC_OscConfig+0x4ec>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fb32 	bl	8000a8c <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142c:	f7ff fb2e 	bl	8000a8c <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e056      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143e:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x41c>
 800144a:	e04e      	b.n	80014ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <HAL_RCC_OscConfig+0x4ec>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fb1b 	bl	8000a8c <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145a:	f7ff fb17 	bl	8000a8c <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e03f      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146c:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f0      	bne.n	800145a <HAL_RCC_OscConfig+0x44a>
 8001478:	e037      	b.n	80014ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d101      	bne.n	8001486 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e032      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <HAL_RCC_OscConfig+0x4e8>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d028      	beq.n	80014e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800149e:	429a      	cmp	r2, r3
 80014a0:	d121      	bne.n	80014e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d11a      	bne.n	80014e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014b6:	4013      	ands	r3, r2
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014be:	4293      	cmp	r3, r2
 80014c0:	d111      	bne.n	80014e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014cc:	085b      	lsrs	r3, r3, #1
 80014ce:	3b01      	subs	r3, #1
 80014d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d107      	bne.n	80014e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d001      	beq.n	80014ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40007000 	.word	0x40007000
 80014f8:	40023800 	.word	0x40023800
 80014fc:	42470060 	.word	0x42470060

08001500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e0cc      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001514:	4b68      	ldr	r3, [pc, #416]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d90c      	bls.n	800153c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001522:	4b65      	ldr	r3, [pc, #404]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800152a:	4b63      	ldr	r3, [pc, #396]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d001      	beq.n	800153c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0b8      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d020      	beq.n	800158a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001554:	4b59      	ldr	r3, [pc, #356]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4a58      	ldr	r2, [pc, #352]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800155e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800156c:	4b53      	ldr	r3, [pc, #332]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	4a52      	ldr	r2, [pc, #328]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001578:	4b50      	ldr	r3, [pc, #320]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	494d      	ldr	r1, [pc, #308]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	4313      	orrs	r3, r2
 8001588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d044      	beq.n	8001620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	4b47      	ldr	r3, [pc, #284]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d119      	bne.n	80015de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e07f      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d003      	beq.n	80015be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015be:	4b3f      	ldr	r3, [pc, #252]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d109      	bne.n	80015de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e06f      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ce:	4b3b      	ldr	r3, [pc, #236]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e067      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015de:	4b37      	ldr	r3, [pc, #220]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f023 0203 	bic.w	r2, r3, #3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4934      	ldr	r1, [pc, #208]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f0:	f7ff fa4c 	bl	8000a8c <HAL_GetTick>
 80015f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	e00a      	b.n	800160e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f8:	f7ff fa48 	bl	8000a8c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	; 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e04f      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 020c 	and.w	r2, r3, #12
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	429a      	cmp	r2, r3
 800161e:	d1eb      	bne.n	80015f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001620:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	d20c      	bcs.n	8001648 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162e:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d001      	beq.n	8001648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e032      	b.n	80016ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4916      	ldr	r1, [pc, #88]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d009      	beq.n	8001686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	490e      	ldr	r1, [pc, #56]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001686:	f000 f821 	bl	80016cc <HAL_RCC_GetSysClockFreq>
 800168a:	4602      	mov	r2, r0
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	490a      	ldr	r1, [pc, #40]	; (80016c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	5ccb      	ldrb	r3, [r1, r3]
 800169a:	fa22 f303 	lsr.w	r3, r2, r3
 800169e:	4a09      	ldr	r2, [pc, #36]	; (80016c4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_RCC_ClockConfig+0x1c8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff f9ac 	bl	8000a04 <HAL_InitTick>

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023c00 	.word	0x40023c00
 80016bc:	40023800 	.word	0x40023800
 80016c0:	08002dcc 	.word	0x08002dcc
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000004 	.word	0x20000004

080016cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016cc:	b5b0      	push	{r4, r5, r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016d2:	2100      	movs	r1, #0
 80016d4:	6079      	str	r1, [r7, #4]
 80016d6:	2100      	movs	r1, #0
 80016d8:	60f9      	str	r1, [r7, #12]
 80016da:	2100      	movs	r1, #0
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016de:	2100      	movs	r1, #0
 80016e0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016e2:	4952      	ldr	r1, [pc, #328]	; (800182c <HAL_RCC_GetSysClockFreq+0x160>)
 80016e4:	6889      	ldr	r1, [r1, #8]
 80016e6:	f001 010c 	and.w	r1, r1, #12
 80016ea:	2908      	cmp	r1, #8
 80016ec:	d00d      	beq.n	800170a <HAL_RCC_GetSysClockFreq+0x3e>
 80016ee:	2908      	cmp	r1, #8
 80016f0:	f200 8094 	bhi.w	800181c <HAL_RCC_GetSysClockFreq+0x150>
 80016f4:	2900      	cmp	r1, #0
 80016f6:	d002      	beq.n	80016fe <HAL_RCC_GetSysClockFreq+0x32>
 80016f8:	2904      	cmp	r1, #4
 80016fa:	d003      	beq.n	8001704 <HAL_RCC_GetSysClockFreq+0x38>
 80016fc:	e08e      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016fe:	4b4c      	ldr	r3, [pc, #304]	; (8001830 <HAL_RCC_GetSysClockFreq+0x164>)
 8001700:	60bb      	str	r3, [r7, #8]
       break;
 8001702:	e08e      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001704:	4b4b      	ldr	r3, [pc, #300]	; (8001834 <HAL_RCC_GetSysClockFreq+0x168>)
 8001706:	60bb      	str	r3, [r7, #8]
      break;
 8001708:	e08b      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800170a:	4948      	ldr	r1, [pc, #288]	; (800182c <HAL_RCC_GetSysClockFreq+0x160>)
 800170c:	6849      	ldr	r1, [r1, #4]
 800170e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001712:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001714:	4945      	ldr	r1, [pc, #276]	; (800182c <HAL_RCC_GetSysClockFreq+0x160>)
 8001716:	6849      	ldr	r1, [r1, #4]
 8001718:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800171c:	2900      	cmp	r1, #0
 800171e:	d024      	beq.n	800176a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001720:	4942      	ldr	r1, [pc, #264]	; (800182c <HAL_RCC_GetSysClockFreq+0x160>)
 8001722:	6849      	ldr	r1, [r1, #4]
 8001724:	0989      	lsrs	r1, r1, #6
 8001726:	4608      	mov	r0, r1
 8001728:	f04f 0100 	mov.w	r1, #0
 800172c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001730:	f04f 0500 	mov.w	r5, #0
 8001734:	ea00 0204 	and.w	r2, r0, r4
 8001738:	ea01 0305 	and.w	r3, r1, r5
 800173c:	493d      	ldr	r1, [pc, #244]	; (8001834 <HAL_RCC_GetSysClockFreq+0x168>)
 800173e:	fb01 f003 	mul.w	r0, r1, r3
 8001742:	2100      	movs	r1, #0
 8001744:	fb01 f102 	mul.w	r1, r1, r2
 8001748:	1844      	adds	r4, r0, r1
 800174a:	493a      	ldr	r1, [pc, #232]	; (8001834 <HAL_RCC_GetSysClockFreq+0x168>)
 800174c:	fba2 0101 	umull	r0, r1, r2, r1
 8001750:	1863      	adds	r3, r4, r1
 8001752:	4619      	mov	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	461a      	mov	r2, r3
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	f7fe fd40 	bl	80001e0 <__aeabi_uldivmod>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4613      	mov	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	e04a      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176a:	4b30      	ldr	r3, [pc, #192]	; (800182c <HAL_RCC_GetSysClockFreq+0x160>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	099b      	lsrs	r3, r3, #6
 8001770:	461a      	mov	r2, r3
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	f240 10ff 	movw	r0, #511	; 0x1ff
 800177a:	f04f 0100 	mov.w	r1, #0
 800177e:	ea02 0400 	and.w	r4, r2, r0
 8001782:	ea03 0501 	and.w	r5, r3, r1
 8001786:	4620      	mov	r0, r4
 8001788:	4629      	mov	r1, r5
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	014b      	lsls	r3, r1, #5
 8001794:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001798:	0142      	lsls	r2, r0, #5
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	1b00      	subs	r0, r0, r4
 80017a0:	eb61 0105 	sbc.w	r1, r1, r5
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	018b      	lsls	r3, r1, #6
 80017ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017b2:	0182      	lsls	r2, r0, #6
 80017b4:	1a12      	subs	r2, r2, r0
 80017b6:	eb63 0301 	sbc.w	r3, r3, r1
 80017ba:	f04f 0000 	mov.w	r0, #0
 80017be:	f04f 0100 	mov.w	r1, #0
 80017c2:	00d9      	lsls	r1, r3, #3
 80017c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017c8:	00d0      	lsls	r0, r2, #3
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	1912      	adds	r2, r2, r4
 80017d0:	eb45 0303 	adc.w	r3, r5, r3
 80017d4:	f04f 0000 	mov.w	r0, #0
 80017d8:	f04f 0100 	mov.w	r1, #0
 80017dc:	0299      	lsls	r1, r3, #10
 80017de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017e2:	0290      	lsls	r0, r2, #10
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	461a      	mov	r2, r3
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	f7fe fcf4 	bl	80001e0 <__aeabi_uldivmod>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4613      	mov	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_RCC_GetSysClockFreq+0x160>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	0c1b      	lsrs	r3, r3, #16
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	3301      	adds	r3, #1
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	fbb2 f3f3 	udiv	r3, r2, r3
 8001818:	60bb      	str	r3, [r7, #8]
      break;
 800181a:	e002      	b.n	8001822 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <HAL_RCC_GetSysClockFreq+0x164>)
 800181e:	60bb      	str	r3, [r7, #8]
      break;
 8001820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001822:	68bb      	ldr	r3, [r7, #8]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bdb0      	pop	{r4, r5, r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	00f42400 	.word	0x00f42400
 8001834:	017d7840 	.word	0x017d7840

08001838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <HAL_RCC_GetHCLKFreq+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000000 	.word	0x20000000

08001850 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800185e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001862:	2b84      	cmp	r3, #132	; 0x84
 8001864:	d005      	beq.n	8001872 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001866:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4413      	add	r3, r2
 800186e:	3303      	adds	r3, #3
 8001870:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001884:	f000 fade 	bl	8001e44 <vTaskStartScheduler>
  
  return osOK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	bd80      	pop	{r7, pc}

0800188e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800188e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001890:	b089      	sub	sp, #36	; 0x24
 8001892:	af04      	add	r7, sp, #16
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d020      	beq.n	80018e2 <osThreadCreate+0x54>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d01c      	beq.n	80018e2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685c      	ldr	r4, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681d      	ldr	r5, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691e      	ldr	r6, [r3, #16]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ffc8 	bl	8001850 <makeFreeRtosPriority>
 80018c0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018ca:	9202      	str	r2, [sp, #8]
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	9100      	str	r1, [sp, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	4632      	mov	r2, r6
 80018d4:	4629      	mov	r1, r5
 80018d6:	4620      	mov	r0, r4
 80018d8:	f000 f8ed 	bl	8001ab6 <xTaskCreateStatic>
 80018dc:	4603      	mov	r3, r0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	e01c      	b.n	800191c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685c      	ldr	r4, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018ee:	b29e      	uxth	r6, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ffaa 	bl	8001850 <makeFreeRtosPriority>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	9200      	str	r2, [sp, #0]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	4632      	mov	r2, r6
 800190a:	4629      	mov	r1, r5
 800190c:	4620      	mov	r0, r4
 800190e:	f000 f92f 	bl	8001b70 <xTaskCreate>
 8001912:	4603      	mov	r3, r0
 8001914:	2b01      	cmp	r3, #1
 8001916:	d001      	beq.n	800191c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001918:	2300      	movs	r3, #0
 800191a:	e000      	b.n	800191e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800191c:	68fb      	ldr	r3, [r7, #12]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001926 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <osDelay+0x16>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	e000      	b.n	800193e <osDelay+0x18>
 800193c:	2301      	movs	r3, #1
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fa4c 	bl	8001ddc <vTaskDelay>
  
  return osOK;
 8001944:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f103 0208 	add.w	r2, r3, #8
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f04f 32ff 	mov.w	r2, #4294967295
 8001966:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f103 0208 	add.w	r2, r3, #8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f103 0208 	add.w	r2, r3, #8
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	601a      	str	r2, [r3, #0]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a06:	d103      	bne.n	8001a10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	e00c      	b.n	8001a2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3308      	adds	r3, #8
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	e002      	b.n	8001a1e <vListInsert+0x2e>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d2f6      	bcs.n	8001a18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	601a      	str	r2, [r3, #0]
}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6892      	ldr	r2, [r2, #8]
 8001a78:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6852      	ldr	r2, [r2, #4]
 8001a82:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d103      	bne.n	8001a96 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	1e5a      	subs	r2, r3, #1
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b08e      	sub	sp, #56	; 0x38
 8001aba:	af04      	add	r7, sp, #16
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10a      	bne.n	8001ae0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ace:	f383 8811 	msr	BASEPRI, r3
 8001ad2:	f3bf 8f6f 	isb	sy
 8001ad6:	f3bf 8f4f 	dsb	sy
 8001ada:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001adc:	bf00      	nop
 8001ade:	e7fe      	b.n	8001ade <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <xTaskCreateStatic+0x46>
	__asm volatile
 8001ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aea:	f383 8811 	msr	BASEPRI, r3
 8001aee:	f3bf 8f6f 	isb	sy
 8001af2:	f3bf 8f4f 	dsb	sy
 8001af6:	61fb      	str	r3, [r7, #28]
}
 8001af8:	bf00      	nop
 8001afa:	e7fe      	b.n	8001afa <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001afc:	2354      	movs	r3, #84	; 0x54
 8001afe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2b54      	cmp	r3, #84	; 0x54
 8001b04:	d00a      	beq.n	8001b1c <xTaskCreateStatic+0x66>
	__asm volatile
 8001b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0a:	f383 8811 	msr	BASEPRI, r3
 8001b0e:	f3bf 8f6f 	isb	sy
 8001b12:	f3bf 8f4f 	dsb	sy
 8001b16:	61bb      	str	r3, [r7, #24]
}
 8001b18:	bf00      	nop
 8001b1a:	e7fe      	b.n	8001b1a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001b1c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d01e      	beq.n	8001b62 <xTaskCreateStatic+0xac>
 8001b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d01b      	beq.n	8001b62 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	9303      	str	r3, [sp, #12]
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	9302      	str	r3, [sp, #8]
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 f850 	bl	8001bfa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001b5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b5c:	f000 f8d4 	bl	8001d08 <prvAddNewTaskToReadyList>
 8001b60:	e001      	b.n	8001b66 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001b66:	697b      	ldr	r3, [r7, #20]
	}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3728      	adds	r7, #40	; 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08c      	sub	sp, #48	; 0x30
 8001b74:	af04      	add	r7, sp, #16
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 fee7 	bl	8002958 <pvPortMalloc>
 8001b8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00e      	beq.n	8001bb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001b92:	2054      	movs	r0, #84	; 0x54
 8001b94:	f000 fee0 	bl	8002958 <pvPortMalloc>
 8001b98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ba6:	e005      	b.n	8001bb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001ba8:	6978      	ldr	r0, [r7, #20]
 8001baa:	f000 ffa1 	bl	8002af0 <vPortFree>
 8001bae:	e001      	b.n	8001bb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d017      	beq.n	8001bea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001bc2:	88fa      	ldrh	r2, [r7, #6]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9303      	str	r3, [sp, #12]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	9302      	str	r3, [sp, #8]
 8001bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68b9      	ldr	r1, [r7, #8]
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f80e 	bl	8001bfa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001bde:	69f8      	ldr	r0, [r7, #28]
 8001be0:	f000 f892 	bl	8001d08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001be4:	2301      	movs	r3, #1
 8001be6:	61bb      	str	r3, [r7, #24]
 8001be8:	e002      	b.n	8001bf0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
	}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3720      	adds	r7, #32
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b088      	sub	sp, #32
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c12:	3b01      	subs	r3, #1
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	f023 0307 	bic.w	r3, r3, #7
 8001c20:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00a      	beq.n	8001c42 <prvInitialiseNewTask+0x48>
	__asm volatile
 8001c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c30:	f383 8811 	msr	BASEPRI, r3
 8001c34:	f3bf 8f6f 	isb	sy
 8001c38:	f3bf 8f4f 	dsb	sy
 8001c3c:	617b      	str	r3, [r7, #20]
}
 8001c3e:	bf00      	nop
 8001c40:	e7fe      	b.n	8001c40 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d01f      	beq.n	8001c88 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	e012      	b.n	8001c74 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	4413      	add	r3, r2
 8001c54:	7819      	ldrb	r1, [r3, #0]
 8001c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3334      	adds	r3, #52	; 0x34
 8001c5e:	460a      	mov	r2, r1
 8001c60:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	4413      	add	r3, r2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d006      	beq.n	8001c7c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3301      	adds	r3, #1
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	2b0f      	cmp	r3, #15
 8001c78:	d9e9      	bls.n	8001c4e <prvInitialiseNewTask+0x54>
 8001c7a:	e000      	b.n	8001c7e <prvInitialiseNewTask+0x84>
			{
				break;
 8001c7c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c86:	e003      	b.n	8001c90 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d901      	bls.n	8001c9a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001c96:	2306      	movs	r3, #6
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c9e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ca4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca8:	2200      	movs	r2, #0
 8001caa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cae:	3304      	adds	r3, #4
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fe6c 	bl	800198e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb8:	3318      	adds	r3, #24
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fe67 	bl	800198e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cc4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc8:	f1c3 0207 	rsb	r2, r3, #7
 8001ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd8:	2200      	movs	r2, #0
 8001cda:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	68f9      	ldr	r1, [r7, #12]
 8001ce8:	69b8      	ldr	r0, [r7, #24]
 8001cea:	f000 fc23 	bl	8002534 <pxPortInitialiseStack>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cfe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001d10:	f000 fd40 	bl	8002794 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001d14:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <prvAddNewTaskToReadyList+0xb8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	4a29      	ldr	r2, [pc, #164]	; (8001dc0 <prvAddNewTaskToReadyList+0xb8>)
 8001d1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001d1e:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <prvAddNewTaskToReadyList+0xbc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001d26:	4a27      	ldr	r2, [pc, #156]	; (8001dc4 <prvAddNewTaskToReadyList+0xbc>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001d2c:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <prvAddNewTaskToReadyList+0xb8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d110      	bne.n	8001d56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001d34:	f000 fabc 	bl	80022b0 <prvInitialiseTaskLists>
 8001d38:	e00d      	b.n	8001d56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <prvAddNewTaskToReadyList+0xc0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <prvAddNewTaskToReadyList+0xbc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d802      	bhi.n	8001d56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001d50:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <prvAddNewTaskToReadyList+0xbc>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <prvAddNewTaskToReadyList+0xc4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	4a1b      	ldr	r2, [pc, #108]	; (8001dcc <prvAddNewTaskToReadyList+0xc4>)
 8001d5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	2201      	movs	r2, #1
 8001d66:	409a      	lsls	r2, r3
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <prvAddNewTaskToReadyList+0xc8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <prvAddNewTaskToReadyList+0xc8>)
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <prvAddNewTaskToReadyList+0xcc>)
 8001d80:	441a      	add	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3304      	adds	r3, #4
 8001d86:	4619      	mov	r1, r3
 8001d88:	4610      	mov	r0, r2
 8001d8a:	f7ff fe0d 	bl	80019a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001d8e:	f000 fd31 	bl	80027f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <prvAddNewTaskToReadyList+0xc0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00e      	beq.n	8001db8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <prvAddNewTaskToReadyList+0xbc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d207      	bcs.n	8001db8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <prvAddNewTaskToReadyList+0xd0>)
 8001daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	f3bf 8f4f 	dsb	sy
 8001db4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000380 	.word	0x20000380
 8001dc4:	20000280 	.word	0x20000280
 8001dc8:	2000038c 	.word	0x2000038c
 8001dcc:	2000039c 	.word	0x2000039c
 8001dd0:	20000388 	.word	0x20000388
 8001dd4:	20000284 	.word	0x20000284
 8001dd8:	e000ed04 	.word	0xe000ed04

08001ddc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d017      	beq.n	8001e1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <vTaskDelay+0x60>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00a      	beq.n	8001e0c <vTaskDelay+0x30>
	__asm volatile
 8001df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dfa:	f383 8811 	msr	BASEPRI, r3
 8001dfe:	f3bf 8f6f 	isb	sy
 8001e02:	f3bf 8f4f 	dsb	sy
 8001e06:	60bb      	str	r3, [r7, #8]
}
 8001e08:	bf00      	nop
 8001e0a:	e7fe      	b.n	8001e0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001e0c:	f000 f87a 	bl	8001f04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001e10:	2100      	movs	r1, #0
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fb28 	bl	8002468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001e18:	f000 f882 	bl	8001f20 <xTaskResumeAll>
 8001e1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d107      	bne.n	8001e34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <vTaskDelay+0x64>)
 8001e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f3bf 8f4f 	dsb	sy
 8001e30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200003a8 	.word	0x200003a8
 8001e40:	e000ed04 	.word	0xe000ed04

08001e44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001e52:	463a      	mov	r2, r7
 8001e54:	1d39      	adds	r1, r7, #4
 8001e56:	f107 0308 	add.w	r3, r7, #8
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fb6c 	bl	8000538 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001e60:	6839      	ldr	r1, [r7, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	9202      	str	r2, [sp, #8]
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	460a      	mov	r2, r1
 8001e72:	491e      	ldr	r1, [pc, #120]	; (8001eec <vTaskStartScheduler+0xa8>)
 8001e74:	481e      	ldr	r0, [pc, #120]	; (8001ef0 <vTaskStartScheduler+0xac>)
 8001e76:	f7ff fe1e 	bl	8001ab6 <xTaskCreateStatic>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4a1d      	ldr	r2, [pc, #116]	; (8001ef4 <vTaskStartScheduler+0xb0>)
 8001e7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001e80:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <vTaskStartScheduler+0xb0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	e001      	b.n	8001e92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d116      	bne.n	8001ec6 <vTaskStartScheduler+0x82>
	__asm volatile
 8001e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e9c:	f383 8811 	msr	BASEPRI, r3
 8001ea0:	f3bf 8f6f 	isb	sy
 8001ea4:	f3bf 8f4f 	dsb	sy
 8001ea8:	613b      	str	r3, [r7, #16]
}
 8001eaa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <vTaskStartScheduler+0xb4>)
 8001eae:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <vTaskStartScheduler+0xb8>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <vTaskStartScheduler+0xbc>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001ec0:	f000 fbc6 	bl	8002650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001ec4:	e00e      	b.n	8001ee4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	d10a      	bne.n	8001ee4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8001ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed2:	f383 8811 	msr	BASEPRI, r3
 8001ed6:	f3bf 8f6f 	isb	sy
 8001eda:	f3bf 8f4f 	dsb	sy
 8001ede:	60fb      	str	r3, [r7, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	e7fe      	b.n	8001ee2 <vTaskStartScheduler+0x9e>
}
 8001ee4:	bf00      	nop
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	08002dc4 	.word	0x08002dc4
 8001ef0:	08002281 	.word	0x08002281
 8001ef4:	200003a4 	.word	0x200003a4
 8001ef8:	200003a0 	.word	0x200003a0
 8001efc:	2000038c 	.word	0x2000038c
 8001f00:	20000384 	.word	0x20000384

08001f04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <vTaskSuspendAll+0x18>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	4a03      	ldr	r2, [pc, #12]	; (8001f1c <vTaskSuspendAll+0x18>)
 8001f10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	200003a8 	.word	0x200003a8

08001f20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001f2e:	4b41      	ldr	r3, [pc, #260]	; (8002034 <xTaskResumeAll+0x114>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10a      	bne.n	8001f4c <xTaskResumeAll+0x2c>
	__asm volatile
 8001f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3a:	f383 8811 	msr	BASEPRI, r3
 8001f3e:	f3bf 8f6f 	isb	sy
 8001f42:	f3bf 8f4f 	dsb	sy
 8001f46:	603b      	str	r3, [r7, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	e7fe      	b.n	8001f4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001f4c:	f000 fc22 	bl	8002794 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001f50:	4b38      	ldr	r3, [pc, #224]	; (8002034 <xTaskResumeAll+0x114>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	4a37      	ldr	r2, [pc, #220]	; (8002034 <xTaskResumeAll+0x114>)
 8001f58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f5a:	4b36      	ldr	r3, [pc, #216]	; (8002034 <xTaskResumeAll+0x114>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d161      	bne.n	8002026 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f62:	4b35      	ldr	r3, [pc, #212]	; (8002038 <xTaskResumeAll+0x118>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d05d      	beq.n	8002026 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f6a:	e02e      	b.n	8001fca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f6c:	4b33      	ldr	r3, [pc, #204]	; (800203c <xTaskResumeAll+0x11c>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3318      	adds	r3, #24
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fd72 	bl	8001a62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	3304      	adds	r3, #4
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fd6d 	bl	8001a62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <xTaskResumeAll+0x120>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	4a2a      	ldr	r2, [pc, #168]	; (8002040 <xTaskResumeAll+0x120>)
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4a27      	ldr	r2, [pc, #156]	; (8002044 <xTaskResumeAll+0x124>)
 8001fa8:	441a      	add	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3304      	adds	r3, #4
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f7ff fcf9 	bl	80019a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fba:	4b23      	ldr	r3, [pc, #140]	; (8002048 <xTaskResumeAll+0x128>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d302      	bcc.n	8001fca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8001fc4:	4b21      	ldr	r3, [pc, #132]	; (800204c <xTaskResumeAll+0x12c>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001fca:	4b1c      	ldr	r3, [pc, #112]	; (800203c <xTaskResumeAll+0x11c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1cc      	bne.n	8001f6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001fd8:	f000 fa08 	bl	80023ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <xTaskResumeAll+0x130>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d010      	beq.n	800200a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001fe8:	f000 f836 	bl	8002058 <xTaskIncrementTick>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <xTaskResumeAll+0x12c>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f1      	bne.n	8001fe8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <xTaskResumeAll+0x130>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <xTaskResumeAll+0x12c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002012:	2301      	movs	r3, #1
 8002014:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <xTaskResumeAll+0x134>)
 8002018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	f3bf 8f4f 	dsb	sy
 8002022:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002026:	f000 fbe5 	bl	80027f4 <vPortExitCritical>

	return xAlreadyYielded;
 800202a:	68bb      	ldr	r3, [r7, #8]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	200003a8 	.word	0x200003a8
 8002038:	20000380 	.word	0x20000380
 800203c:	20000340 	.word	0x20000340
 8002040:	20000388 	.word	0x20000388
 8002044:	20000284 	.word	0x20000284
 8002048:	20000280 	.word	0x20000280
 800204c:	20000394 	.word	0x20000394
 8002050:	20000390 	.word	0x20000390
 8002054:	e000ed04 	.word	0xe000ed04

08002058 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002062:	4b4e      	ldr	r3, [pc, #312]	; (800219c <xTaskIncrementTick+0x144>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 808e 	bne.w	8002188 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800206c:	4b4c      	ldr	r3, [pc, #304]	; (80021a0 <xTaskIncrementTick+0x148>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002074:	4a4a      	ldr	r2, [pc, #296]	; (80021a0 <xTaskIncrementTick+0x148>)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d120      	bne.n	80020c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002080:	4b48      	ldr	r3, [pc, #288]	; (80021a4 <xTaskIncrementTick+0x14c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800208a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208e:	f383 8811 	msr	BASEPRI, r3
 8002092:	f3bf 8f6f 	isb	sy
 8002096:	f3bf 8f4f 	dsb	sy
 800209a:	603b      	str	r3, [r7, #0]
}
 800209c:	bf00      	nop
 800209e:	e7fe      	b.n	800209e <xTaskIncrementTick+0x46>
 80020a0:	4b40      	ldr	r3, [pc, #256]	; (80021a4 <xTaskIncrementTick+0x14c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b40      	ldr	r3, [pc, #256]	; (80021a8 <xTaskIncrementTick+0x150>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a3e      	ldr	r2, [pc, #248]	; (80021a4 <xTaskIncrementTick+0x14c>)
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	4a3e      	ldr	r2, [pc, #248]	; (80021a8 <xTaskIncrementTick+0x150>)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <xTaskIncrementTick+0x154>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	4a3c      	ldr	r2, [pc, #240]	; (80021ac <xTaskIncrementTick+0x154>)
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	f000 f995 	bl	80023ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80020c2:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <xTaskIncrementTick+0x158>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d348      	bcc.n	800215e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020cc:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <xTaskIncrementTick+0x14c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d104      	bne.n	80020e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020d6:	4b36      	ldr	r3, [pc, #216]	; (80021b0 <xTaskIncrementTick+0x158>)
 80020d8:	f04f 32ff 	mov.w	r2, #4294967295
 80020dc:	601a      	str	r2, [r3, #0]
					break;
 80020de:	e03e      	b.n	800215e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020e0:	4b30      	ldr	r3, [pc, #192]	; (80021a4 <xTaskIncrementTick+0x14c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d203      	bcs.n	8002100 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80020f8:	4a2d      	ldr	r2, [pc, #180]	; (80021b0 <xTaskIncrementTick+0x158>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80020fe:	e02e      	b.n	800215e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	3304      	adds	r3, #4
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fcac 	bl	8001a62 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	3318      	adds	r3, #24
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fca3 	bl	8001a62 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	2201      	movs	r2, #1
 8002122:	409a      	lsls	r2, r3
 8002124:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <xTaskIncrementTick+0x15c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4313      	orrs	r3, r2
 800212a:	4a22      	ldr	r2, [pc, #136]	; (80021b4 <xTaskIncrementTick+0x15c>)
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <xTaskIncrementTick+0x160>)
 800213c:	441a      	add	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	3304      	adds	r3, #4
 8002142:	4619      	mov	r1, r3
 8002144:	4610      	mov	r0, r2
 8002146:	f7ff fc2f 	bl	80019a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <xTaskIncrementTick+0x164>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	429a      	cmp	r2, r3
 8002156:	d3b9      	bcc.n	80020cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002158:	2301      	movs	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800215c:	e7b6      	b.n	80020cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <xTaskIncrementTick+0x164>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002164:	4914      	ldr	r1, [pc, #80]	; (80021b8 <xTaskIncrementTick+0x160>)
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d901      	bls.n	800217a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002176:	2301      	movs	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <xTaskIncrementTick+0x168>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d007      	beq.n	8002192 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002182:	2301      	movs	r3, #1
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e004      	b.n	8002192 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <xTaskIncrementTick+0x16c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3301      	adds	r3, #1
 800218e:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <xTaskIncrementTick+0x16c>)
 8002190:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002192:	697b      	ldr	r3, [r7, #20]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	200003a8 	.word	0x200003a8
 80021a0:	20000384 	.word	0x20000384
 80021a4:	20000338 	.word	0x20000338
 80021a8:	2000033c 	.word	0x2000033c
 80021ac:	20000398 	.word	0x20000398
 80021b0:	200003a0 	.word	0x200003a0
 80021b4:	20000388 	.word	0x20000388
 80021b8:	20000284 	.word	0x20000284
 80021bc:	20000280 	.word	0x20000280
 80021c0:	20000394 	.word	0x20000394
 80021c4:	20000390 	.word	0x20000390

080021c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021ce:	4b27      	ldr	r3, [pc, #156]	; (800226c <vTaskSwitchContext+0xa4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80021d6:	4b26      	ldr	r3, [pc, #152]	; (8002270 <vTaskSwitchContext+0xa8>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80021dc:	e03f      	b.n	800225e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80021de:	4b24      	ldr	r3, [pc, #144]	; (8002270 <vTaskSwitchContext+0xa8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021e4:	4b23      	ldr	r3, [pc, #140]	; (8002274 <vTaskSwitchContext+0xac>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	fab3 f383 	clz	r3, r3
 80021f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80021f2:	7afb      	ldrb	r3, [r7, #11]
 80021f4:	f1c3 031f 	rsb	r3, r3, #31
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	491f      	ldr	r1, [pc, #124]	; (8002278 <vTaskSwitchContext+0xb0>)
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10a      	bne.n	8002224 <vTaskSwitchContext+0x5c>
	__asm volatile
 800220e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002212:	f383 8811 	msr	BASEPRI, r3
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	f3bf 8f4f 	dsb	sy
 800221e:	607b      	str	r3, [r7, #4]
}
 8002220:	bf00      	nop
 8002222:	e7fe      	b.n	8002222 <vTaskSwitchContext+0x5a>
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <vTaskSwitchContext+0xb0>)
 8002230:	4413      	add	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	3308      	adds	r3, #8
 8002246:	429a      	cmp	r2, r3
 8002248:	d104      	bne.n	8002254 <vTaskSwitchContext+0x8c>
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	4a08      	ldr	r2, [pc, #32]	; (800227c <vTaskSwitchContext+0xb4>)
 800225c:	6013      	str	r3, [r2, #0]
}
 800225e:	bf00      	nop
 8002260:	371c      	adds	r7, #28
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	200003a8 	.word	0x200003a8
 8002270:	20000394 	.word	0x20000394
 8002274:	20000388 	.word	0x20000388
 8002278:	20000284 	.word	0x20000284
 800227c:	20000280 	.word	0x20000280

08002280 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002288:	f000 f852 	bl	8002330 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <prvIdleTask+0x28>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d9f9      	bls.n	8002288 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <prvIdleTask+0x2c>)
 8002296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	f3bf 8f4f 	dsb	sy
 80022a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80022a4:	e7f0      	b.n	8002288 <prvIdleTask+0x8>
 80022a6:	bf00      	nop
 80022a8:	20000284 	.word	0x20000284
 80022ac:	e000ed04 	.word	0xe000ed04

080022b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	e00c      	b.n	80022d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4a12      	ldr	r2, [pc, #72]	; (8002310 <prvInitialiseTaskLists+0x60>)
 80022c8:	4413      	add	r3, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fb3f 	bl	800194e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3301      	adds	r3, #1
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b06      	cmp	r3, #6
 80022da:	d9ef      	bls.n	80022bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80022dc:	480d      	ldr	r0, [pc, #52]	; (8002314 <prvInitialiseTaskLists+0x64>)
 80022de:	f7ff fb36 	bl	800194e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80022e2:	480d      	ldr	r0, [pc, #52]	; (8002318 <prvInitialiseTaskLists+0x68>)
 80022e4:	f7ff fb33 	bl	800194e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <prvInitialiseTaskLists+0x6c>)
 80022ea:	f7ff fb30 	bl	800194e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80022ee:	480c      	ldr	r0, [pc, #48]	; (8002320 <prvInitialiseTaskLists+0x70>)
 80022f0:	f7ff fb2d 	bl	800194e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80022f4:	480b      	ldr	r0, [pc, #44]	; (8002324 <prvInitialiseTaskLists+0x74>)
 80022f6:	f7ff fb2a 	bl	800194e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <prvInitialiseTaskLists+0x78>)
 80022fc:	4a05      	ldr	r2, [pc, #20]	; (8002314 <prvInitialiseTaskLists+0x64>)
 80022fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002300:	4b0a      	ldr	r3, [pc, #40]	; (800232c <prvInitialiseTaskLists+0x7c>)
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <prvInitialiseTaskLists+0x68>)
 8002304:	601a      	str	r2, [r3, #0]
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000284 	.word	0x20000284
 8002314:	20000310 	.word	0x20000310
 8002318:	20000324 	.word	0x20000324
 800231c:	20000340 	.word	0x20000340
 8002320:	20000354 	.word	0x20000354
 8002324:	2000036c 	.word	0x2000036c
 8002328:	20000338 	.word	0x20000338
 800232c:	2000033c 	.word	0x2000033c

08002330 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002336:	e019      	b.n	800236c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002338:	f000 fa2c 	bl	8002794 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800233c:	4b10      	ldr	r3, [pc, #64]	; (8002380 <prvCheckTasksWaitingTermination+0x50>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3304      	adds	r3, #4
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fb8a 	bl	8001a62 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <prvCheckTasksWaitingTermination+0x54>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3b01      	subs	r3, #1
 8002354:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <prvCheckTasksWaitingTermination+0x54>)
 8002356:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <prvCheckTasksWaitingTermination+0x58>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	3b01      	subs	r3, #1
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <prvCheckTasksWaitingTermination+0x58>)
 8002360:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002362:	f000 fa47 	bl	80027f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f810 	bl	800238c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <prvCheckTasksWaitingTermination+0x58>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1e1      	bne.n	8002338 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000354 	.word	0x20000354
 8002384:	20000380 	.word	0x20000380
 8002388:	20000368 	.word	0x20000368

0800238c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800239a:	2b00      	cmp	r3, #0
 800239c:	d108      	bne.n	80023b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fba4 	bl	8002af0 <vPortFree>
				vPortFree( pxTCB );
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fba1 	bl	8002af0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80023ae:	e018      	b.n	80023e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d103      	bne.n	80023c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fb98 	bl	8002af0 <vPortFree>
	}
 80023c0:	e00f      	b.n	80023e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d00a      	beq.n	80023e2 <prvDeleteTCB+0x56>
	__asm volatile
 80023cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d0:	f383 8811 	msr	BASEPRI, r3
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	60fb      	str	r3, [r7, #12]
}
 80023de:	bf00      	nop
 80023e0:	e7fe      	b.n	80023e0 <prvDeleteTCB+0x54>
	}
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <prvResetNextTaskUnblockTime+0x38>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d104      	bne.n	8002406 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <prvResetNextTaskUnblockTime+0x3c>)
 80023fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002402:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002404:	e008      	b.n	8002418 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <prvResetNextTaskUnblockTime+0x38>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <prvResetNextTaskUnblockTime+0x3c>)
 8002416:	6013      	str	r3, [r2, #0]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	20000338 	.word	0x20000338
 8002428:	200003a0 	.word	0x200003a0

0800242c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <xTaskGetSchedulerState+0x34>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d102      	bne.n	8002440 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800243a:	2301      	movs	r3, #1
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	e008      	b.n	8002452 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <xTaskGetSchedulerState+0x38>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002448:	2302      	movs	r3, #2
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	e001      	b.n	8002452 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800244e:	2300      	movs	r3, #0
 8002450:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002452:	687b      	ldr	r3, [r7, #4]
	}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	2000038c 	.word	0x2000038c
 8002464:	200003a8 	.word	0x200003a8

08002468 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002472:	4b29      	ldr	r3, [pc, #164]	; (8002518 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002478:	4b28      	ldr	r3, [pc, #160]	; (800251c <prvAddCurrentTaskToDelayedList+0xb4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3304      	adds	r3, #4
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff faef 	bl	8001a62 <uxListRemove>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10b      	bne.n	80024a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <prvAddCurrentTaskToDelayedList+0xb4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	2201      	movs	r2, #1
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	4b21      	ldr	r3, [pc, #132]	; (8002520 <prvAddCurrentTaskToDelayedList+0xb8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4013      	ands	r3, r2
 800249e:	4a20      	ldr	r2, [pc, #128]	; (8002520 <prvAddCurrentTaskToDelayedList+0xb8>)
 80024a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a8:	d10a      	bne.n	80024c0 <prvAddCurrentTaskToDelayedList+0x58>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <prvAddCurrentTaskToDelayedList+0xb4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3304      	adds	r3, #4
 80024b6:	4619      	mov	r1, r3
 80024b8:	481a      	ldr	r0, [pc, #104]	; (8002524 <prvAddCurrentTaskToDelayedList+0xbc>)
 80024ba:	f7ff fa75 	bl	80019a8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80024be:	e026      	b.n	800250e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <prvAddCurrentTaskToDelayedList+0xb4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d209      	bcs.n	80024ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <prvAddCurrentTaskToDelayedList+0xc0>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <prvAddCurrentTaskToDelayedList+0xb4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3304      	adds	r3, #4
 80024e2:	4619      	mov	r1, r3
 80024e4:	4610      	mov	r0, r2
 80024e6:	f7ff fa83 	bl	80019f0 <vListInsert>
}
 80024ea:	e010      	b.n	800250e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <prvAddCurrentTaskToDelayedList+0xc4>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <prvAddCurrentTaskToDelayedList+0xb4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3304      	adds	r3, #4
 80024f6:	4619      	mov	r1, r3
 80024f8:	4610      	mov	r0, r2
 80024fa:	f7ff fa79 	bl	80019f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	429a      	cmp	r2, r3
 8002506:	d202      	bcs.n	800250e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002508:	4a09      	ldr	r2, [pc, #36]	; (8002530 <prvAddCurrentTaskToDelayedList+0xc8>)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	6013      	str	r3, [r2, #0]
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000384 	.word	0x20000384
 800251c:	20000280 	.word	0x20000280
 8002520:	20000388 	.word	0x20000388
 8002524:	2000036c 	.word	0x2000036c
 8002528:	2000033c 	.word	0x2000033c
 800252c:	20000338 	.word	0x20000338
 8002530:	200003a0 	.word	0x200003a0

08002534 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3b04      	subs	r3, #4
 8002544:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800254c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3b04      	subs	r3, #4
 8002552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f023 0201 	bic.w	r2, r3, #1
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3b04      	subs	r3, #4
 8002562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002564:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <pxPortInitialiseStack+0x64>)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3b14      	subs	r3, #20
 800256e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3b04      	subs	r3, #4
 800257a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f06f 0202 	mvn.w	r2, #2
 8002582:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3b20      	subs	r3, #32
 8002588:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800258a:	68fb      	ldr	r3, [r7, #12]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	0800259d 	.word	0x0800259d

0800259c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <prvTaskExitError+0x54>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ae:	d00a      	beq.n	80025c6 <prvTaskExitError+0x2a>
	__asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	60fb      	str	r3, [r7, #12]
}
 80025c2:	bf00      	nop
 80025c4:	e7fe      	b.n	80025c4 <prvTaskExitError+0x28>
	__asm volatile
 80025c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ca:	f383 8811 	msr	BASEPRI, r3
 80025ce:	f3bf 8f6f 	isb	sy
 80025d2:	f3bf 8f4f 	dsb	sy
 80025d6:	60bb      	str	r3, [r7, #8]
}
 80025d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80025da:	bf00      	nop
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0fc      	beq.n	80025dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	2000000c 	.word	0x2000000c
	...

08002600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <pxCurrentTCBConst2>)
 8002602:	6819      	ldr	r1, [r3, #0]
 8002604:	6808      	ldr	r0, [r1, #0]
 8002606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800260a:	f380 8809 	msr	PSP, r0
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	f04f 0000 	mov.w	r0, #0
 8002616:	f380 8811 	msr	BASEPRI, r0
 800261a:	4770      	bx	lr
 800261c:	f3af 8000 	nop.w

08002620 <pxCurrentTCBConst2>:
 8002620:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop

08002628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002628:	4808      	ldr	r0, [pc, #32]	; (800264c <prvPortStartFirstTask+0x24>)
 800262a:	6800      	ldr	r0, [r0, #0]
 800262c:	6800      	ldr	r0, [r0, #0]
 800262e:	f380 8808 	msr	MSP, r0
 8002632:	f04f 0000 	mov.w	r0, #0
 8002636:	f380 8814 	msr	CONTROL, r0
 800263a:	b662      	cpsie	i
 800263c:	b661      	cpsie	f
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	df00      	svc	0
 8002648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800264a:	bf00      	nop
 800264c:	e000ed08 	.word	0xe000ed08

08002650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002656:	4b46      	ldr	r3, [pc, #280]	; (8002770 <xPortStartScheduler+0x120>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a46      	ldr	r2, [pc, #280]	; (8002774 <xPortStartScheduler+0x124>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d10a      	bne.n	8002676 <xPortStartScheduler+0x26>
	__asm volatile
 8002660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	613b      	str	r3, [r7, #16]
}
 8002672:	bf00      	nop
 8002674:	e7fe      	b.n	8002674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002676:	4b3e      	ldr	r3, [pc, #248]	; (8002770 <xPortStartScheduler+0x120>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a3f      	ldr	r2, [pc, #252]	; (8002778 <xPortStartScheduler+0x128>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d10a      	bne.n	8002696 <xPortStartScheduler+0x46>
	__asm volatile
 8002680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002684:	f383 8811 	msr	BASEPRI, r3
 8002688:	f3bf 8f6f 	isb	sy
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	60fb      	str	r3, [r7, #12]
}
 8002692:	bf00      	nop
 8002694:	e7fe      	b.n	8002694 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002696:	4b39      	ldr	r3, [pc, #228]	; (800277c <xPortStartScheduler+0x12c>)
 8002698:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	22ff      	movs	r2, #255	; 0xff
 80026a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4b31      	ldr	r3, [pc, #196]	; (8002780 <xPortStartScheduler+0x130>)
 80026bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80026be:	4b31      	ldr	r3, [pc, #196]	; (8002784 <xPortStartScheduler+0x134>)
 80026c0:	2207      	movs	r2, #7
 80026c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026c4:	e009      	b.n	80026da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80026c6:	4b2f      	ldr	r3, [pc, #188]	; (8002784 <xPortStartScheduler+0x134>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	4a2d      	ldr	r2, [pc, #180]	; (8002784 <xPortStartScheduler+0x134>)
 80026ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b80      	cmp	r3, #128	; 0x80
 80026e4:	d0ef      	beq.n	80026c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80026e6:	4b27      	ldr	r3, [pc, #156]	; (8002784 <xPortStartScheduler+0x134>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d00a      	beq.n	8002708 <xPortStartScheduler+0xb8>
	__asm volatile
 80026f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	60bb      	str	r3, [r7, #8]
}
 8002704:	bf00      	nop
 8002706:	e7fe      	b.n	8002706 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002708:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <xPortStartScheduler+0x134>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	4a1d      	ldr	r2, [pc, #116]	; (8002784 <xPortStartScheduler+0x134>)
 8002710:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <xPortStartScheduler+0x134>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800271a:	4a1a      	ldr	r2, [pc, #104]	; (8002784 <xPortStartScheduler+0x134>)
 800271c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002726:	4b18      	ldr	r3, [pc, #96]	; (8002788 <xPortStartScheduler+0x138>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a17      	ldr	r2, [pc, #92]	; (8002788 <xPortStartScheduler+0x138>)
 800272c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <xPortStartScheduler+0x138>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a14      	ldr	r2, [pc, #80]	; (8002788 <xPortStartScheduler+0x138>)
 8002738:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800273c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800273e:	f000 f8dd 	bl	80028fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <xPortStartScheduler+0x13c>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002748:	f000 f8fc 	bl	8002944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800274c:	4b10      	ldr	r3, [pc, #64]	; (8002790 <xPortStartScheduler+0x140>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0f      	ldr	r2, [pc, #60]	; (8002790 <xPortStartScheduler+0x140>)
 8002752:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002756:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002758:	f7ff ff66 	bl	8002628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800275c:	f7ff fd34 	bl	80021c8 <vTaskSwitchContext>
	prvTaskExitError();
 8002760:	f7ff ff1c 	bl	800259c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	e000ed00 	.word	0xe000ed00
 8002774:	410fc271 	.word	0x410fc271
 8002778:	410fc270 	.word	0x410fc270
 800277c:	e000e400 	.word	0xe000e400
 8002780:	200003ac 	.word	0x200003ac
 8002784:	200003b0 	.word	0x200003b0
 8002788:	e000ed20 	.word	0xe000ed20
 800278c:	2000000c 	.word	0x2000000c
 8002790:	e000ef34 	.word	0xe000ef34

08002794 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
	__asm volatile
 800279a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279e:	f383 8811 	msr	BASEPRI, r3
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	f3bf 8f4f 	dsb	sy
 80027aa:	607b      	str	r3, [r7, #4]
}
 80027ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <vPortEnterCritical+0x58>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	3301      	adds	r3, #1
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <vPortEnterCritical+0x58>)
 80027b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <vPortEnterCritical+0x58>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d10f      	bne.n	80027e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <vPortEnterCritical+0x5c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80027ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ce:	f383 8811 	msr	BASEPRI, r3
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	603b      	str	r3, [r7, #0]
}
 80027dc:	bf00      	nop
 80027de:	e7fe      	b.n	80027de <vPortEnterCritical+0x4a>
	}
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	2000000c 	.word	0x2000000c
 80027f0:	e000ed04 	.word	0xe000ed04

080027f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <vPortExitCritical+0x50>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10a      	bne.n	8002818 <vPortExitCritical+0x24>
	__asm volatile
 8002802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002806:	f383 8811 	msr	BASEPRI, r3
 800280a:	f3bf 8f6f 	isb	sy
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	607b      	str	r3, [r7, #4]
}
 8002814:	bf00      	nop
 8002816:	e7fe      	b.n	8002816 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002818:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <vPortExitCritical+0x50>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3b01      	subs	r3, #1
 800281e:	4a09      	ldr	r2, [pc, #36]	; (8002844 <vPortExitCritical+0x50>)
 8002820:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <vPortExitCritical+0x50>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d105      	bne.n	8002836 <vPortExitCritical+0x42>
 800282a:	2300      	movs	r3, #0
 800282c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002834:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	2000000c 	.word	0x2000000c
	...

08002850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002850:	f3ef 8009 	mrs	r0, PSP
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <pxCurrentTCBConst>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	f01e 0f10 	tst.w	lr, #16
 8002860:	bf08      	it	eq
 8002862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800286a:	6010      	str	r0, [r2, #0]
 800286c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002870:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002874:	f380 8811 	msr	BASEPRI, r0
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f7ff fca2 	bl	80021c8 <vTaskSwitchContext>
 8002884:	f04f 0000 	mov.w	r0, #0
 8002888:	f380 8811 	msr	BASEPRI, r0
 800288c:	bc09      	pop	{r0, r3}
 800288e:	6819      	ldr	r1, [r3, #0]
 8002890:	6808      	ldr	r0, [r1, #0]
 8002892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002896:	f01e 0f10 	tst.w	lr, #16
 800289a:	bf08      	it	eq
 800289c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80028a0:	f380 8809 	msr	PSP, r0
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	f3af 8000 	nop.w

080028b0 <pxCurrentTCBConst>:
 80028b0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop

080028b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
	__asm volatile
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	607b      	str	r3, [r7, #4]
}
 80028d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80028d2:	f7ff fbc1 	bl	8002058 <xTaskIncrementTick>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <xPortSysTickHandler+0x40>)
 80028de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	2300      	movs	r3, #0
 80028e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	f383 8811 	msr	BASEPRI, r3
}
 80028ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	e000ed04 	.word	0xe000ed04

080028fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <vPortSetupTimerInterrupt+0x34>)
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <vPortSetupTimerInterrupt+0x38>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <vPortSetupTimerInterrupt+0x3c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0a      	ldr	r2, [pc, #40]	; (800293c <vPortSetupTimerInterrupt+0x40>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	099b      	lsrs	r3, r3, #6
 8002918:	4a09      	ldr	r2, [pc, #36]	; (8002940 <vPortSetupTimerInterrupt+0x44>)
 800291a:	3b01      	subs	r3, #1
 800291c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800291e:	4b04      	ldr	r3, [pc, #16]	; (8002930 <vPortSetupTimerInterrupt+0x34>)
 8002920:	2207      	movs	r2, #7
 8002922:	601a      	str	r2, [r3, #0]
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000e010 	.word	0xe000e010
 8002934:	e000e018 	.word	0xe000e018
 8002938:	20000000 	.word	0x20000000
 800293c:	10624dd3 	.word	0x10624dd3
 8002940:	e000e014 	.word	0xe000e014

08002944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002954 <vPortEnableVFP+0x10>
 8002948:	6801      	ldr	r1, [r0, #0]
 800294a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800294e:	6001      	str	r1, [r0, #0]
 8002950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002952:	bf00      	nop
 8002954:	e000ed88 	.word	0xe000ed88

08002958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002960:	2300      	movs	r3, #0
 8002962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002964:	f7ff face 	bl	8001f04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002968:	4b5b      	ldr	r3, [pc, #364]	; (8002ad8 <pvPortMalloc+0x180>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002970:	f000 f920 	bl	8002bb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002974:	4b59      	ldr	r3, [pc, #356]	; (8002adc <pvPortMalloc+0x184>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	f040 8093 	bne.w	8002aa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01d      	beq.n	80029c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002988:	2208      	movs	r2, #8
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	2b00      	cmp	r3, #0
 8002998:	d014      	beq.n	80029c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f023 0307 	bic.w	r3, r3, #7
 80029a0:	3308      	adds	r3, #8
 80029a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <pvPortMalloc+0x6c>
	__asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	617b      	str	r3, [r7, #20]
}
 80029c0:	bf00      	nop
 80029c2:	e7fe      	b.n	80029c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d06e      	beq.n	8002aa8 <pvPortMalloc+0x150>
 80029ca:	4b45      	ldr	r3, [pc, #276]	; (8002ae0 <pvPortMalloc+0x188>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d869      	bhi.n	8002aa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80029d4:	4b43      	ldr	r3, [pc, #268]	; (8002ae4 <pvPortMalloc+0x18c>)
 80029d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80029d8:	4b42      	ldr	r3, [pc, #264]	; (8002ae4 <pvPortMalloc+0x18c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029de:	e004      	b.n	80029ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d903      	bls.n	80029fc <pvPortMalloc+0xa4>
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f1      	bne.n	80029e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80029fc:	4b36      	ldr	r3, [pc, #216]	; (8002ad8 <pvPortMalloc+0x180>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d050      	beq.n	8002aa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	4413      	add	r3, r2
 8002a0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	1ad2      	subs	r2, r2, r3
 8002a20:	2308      	movs	r3, #8
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d91f      	bls.n	8002a68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <pvPortMalloc+0xf8>
	__asm volatile
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	613b      	str	r3, [r7, #16]
}
 8002a4c:	bf00      	nop
 8002a4e:	e7fe      	b.n	8002a4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	1ad2      	subs	r2, r2, r3
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a62:	69b8      	ldr	r0, [r7, #24]
 8002a64:	f000 f908 	bl	8002c78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a68:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <pvPortMalloc+0x188>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	4a1b      	ldr	r2, [pc, #108]	; (8002ae0 <pvPortMalloc+0x188>)
 8002a74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <pvPortMalloc+0x188>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <pvPortMalloc+0x190>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d203      	bcs.n	8002a8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a82:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <pvPortMalloc+0x188>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <pvPortMalloc+0x190>)
 8002a88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <pvPortMalloc+0x184>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002a9e:	4b13      	ldr	r3, [pc, #76]	; (8002aec <pvPortMalloc+0x194>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	4a11      	ldr	r2, [pc, #68]	; (8002aec <pvPortMalloc+0x194>)
 8002aa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002aa8:	f7ff fa3a 	bl	8001f20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <pvPortMalloc+0x174>
	__asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	60fb      	str	r3, [r7, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	e7fe      	b.n	8002aca <pvPortMalloc+0x172>
	return pvReturn;
 8002acc:	69fb      	ldr	r3, [r7, #28]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3728      	adds	r7, #40	; 0x28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20003fbc 	.word	0x20003fbc
 8002adc:	20003fd0 	.word	0x20003fd0
 8002ae0:	20003fc0 	.word	0x20003fc0
 8002ae4:	20003fb4 	.word	0x20003fb4
 8002ae8:	20003fc4 	.word	0x20003fc4
 8002aec:	20003fc8 	.word	0x20003fc8

08002af0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d04d      	beq.n	8002b9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002b02:	2308      	movs	r3, #8
 8002b04:	425b      	negs	r3, r3
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4413      	add	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <vPortFree+0xb8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10a      	bne.n	8002b34 <vPortFree+0x44>
	__asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	60fb      	str	r3, [r7, #12]
}
 8002b30:	bf00      	nop
 8002b32:	e7fe      	b.n	8002b32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <vPortFree+0x62>
	__asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	60bb      	str	r3, [r7, #8]
}
 8002b4e:	bf00      	nop
 8002b50:	e7fe      	b.n	8002b50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <vPortFree+0xb8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01e      	beq.n	8002b9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d11a      	bne.n	8002b9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <vPortFree+0xb8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	401a      	ands	r2, r3
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002b78:	f7ff f9c4 	bl	8001f04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <vPortFree+0xbc>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4413      	add	r3, r2
 8002b86:	4a09      	ldr	r2, [pc, #36]	; (8002bac <vPortFree+0xbc>)
 8002b88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b8a:	6938      	ldr	r0, [r7, #16]
 8002b8c:	f000 f874 	bl	8002c78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002b90:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <vPortFree+0xc0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3301      	adds	r3, #1
 8002b96:	4a06      	ldr	r2, [pc, #24]	; (8002bb0 <vPortFree+0xc0>)
 8002b98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002b9a:	f7ff f9c1 	bl	8001f20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20003fd0 	.word	0x20003fd0
 8002bac:	20003fc0 	.word	0x20003fc0
 8002bb0:	20003fcc 	.word	0x20003fcc

08002bb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002bba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002bbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <prvHeapInit+0xac>)
 8002bc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00c      	beq.n	8002be8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3307      	adds	r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 0307 	bic.w	r3, r3, #7
 8002bda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	4a1f      	ldr	r2, [pc, #124]	; (8002c60 <prvHeapInit+0xac>)
 8002be4:	4413      	add	r3, r2
 8002be6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002bec:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <prvHeapInit+0xb0>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002bf2:	4b1c      	ldr	r3, [pc, #112]	; (8002c64 <prvHeapInit+0xb0>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002c00:	2208      	movs	r2, #8
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0307 	bic.w	r3, r3, #7
 8002c0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4a15      	ldr	r2, [pc, #84]	; (8002c68 <prvHeapInit+0xb4>)
 8002c14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <prvHeapInit+0xb4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <prvHeapInit+0xb4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	1ad2      	subs	r2, r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <prvHeapInit+0xb4>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4a0a      	ldr	r2, [pc, #40]	; (8002c6c <prvHeapInit+0xb8>)
 8002c42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <prvHeapInit+0xbc>)
 8002c4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <prvHeapInit+0xc0>)
 8002c4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c52:	601a      	str	r2, [r3, #0]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	200003b4 	.word	0x200003b4
 8002c64:	20003fb4 	.word	0x20003fb4
 8002c68:	20003fbc 	.word	0x20003fbc
 8002c6c:	20003fc4 	.word	0x20003fc4
 8002c70:	20003fc0 	.word	0x20003fc0
 8002c74:	20003fd0 	.word	0x20003fd0

08002c78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c80:	4b28      	ldr	r3, [pc, #160]	; (8002d24 <prvInsertBlockIntoFreeList+0xac>)
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	e002      	b.n	8002c8c <prvInsertBlockIntoFreeList+0x14>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d8f7      	bhi.n	8002c86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d108      	bne.n	8002cba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	441a      	add	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	441a      	add	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d118      	bne.n	8002d00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <prvInsertBlockIntoFreeList+0xb0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d00d      	beq.n	8002cf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	441a      	add	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	e008      	b.n	8002d08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002cf6:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <prvInsertBlockIntoFreeList+0xb0>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e003      	b.n	8002d08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d002      	beq.n	8002d16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20003fb4 	.word	0x20003fb4
 8002d28:	20003fbc 	.word	0x20003fbc

08002d2c <__libc_init_array>:
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	4d0d      	ldr	r5, [pc, #52]	; (8002d64 <__libc_init_array+0x38>)
 8002d30:	4c0d      	ldr	r4, [pc, #52]	; (8002d68 <__libc_init_array+0x3c>)
 8002d32:	1b64      	subs	r4, r4, r5
 8002d34:	10a4      	asrs	r4, r4, #2
 8002d36:	2600      	movs	r6, #0
 8002d38:	42a6      	cmp	r6, r4
 8002d3a:	d109      	bne.n	8002d50 <__libc_init_array+0x24>
 8002d3c:	4d0b      	ldr	r5, [pc, #44]	; (8002d6c <__libc_init_array+0x40>)
 8002d3e:	4c0c      	ldr	r4, [pc, #48]	; (8002d70 <__libc_init_array+0x44>)
 8002d40:	f000 f820 	bl	8002d84 <_init>
 8002d44:	1b64      	subs	r4, r4, r5
 8002d46:	10a4      	asrs	r4, r4, #2
 8002d48:	2600      	movs	r6, #0
 8002d4a:	42a6      	cmp	r6, r4
 8002d4c:	d105      	bne.n	8002d5a <__libc_init_array+0x2e>
 8002d4e:	bd70      	pop	{r4, r5, r6, pc}
 8002d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d54:	4798      	blx	r3
 8002d56:	3601      	adds	r6, #1
 8002d58:	e7ee      	b.n	8002d38 <__libc_init_array+0xc>
 8002d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d5e:	4798      	blx	r3
 8002d60:	3601      	adds	r6, #1
 8002d62:	e7f2      	b.n	8002d4a <__libc_init_array+0x1e>
 8002d64:	08002de4 	.word	0x08002de4
 8002d68:	08002de4 	.word	0x08002de4
 8002d6c:	08002de4 	.word	0x08002de4
 8002d70:	08002de8 	.word	0x08002de8

08002d74 <memset>:
 8002d74:	4402      	add	r2, r0
 8002d76:	4603      	mov	r3, r0
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d100      	bne.n	8002d7e <memset+0xa>
 8002d7c:	4770      	bx	lr
 8002d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d82:	e7f9      	b.n	8002d78 <memset+0x4>

08002d84 <_init>:
 8002d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d86:	bf00      	nop
 8002d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8a:	bc08      	pop	{r3}
 8002d8c:	469e      	mov	lr, r3
 8002d8e:	4770      	bx	lr

08002d90 <_fini>:
 8002d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d92:	bf00      	nop
 8002d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d96:	bc08      	pop	{r3}
 8002d98:	469e      	mov	lr, r3
 8002d9a:	4770      	bx	lr
